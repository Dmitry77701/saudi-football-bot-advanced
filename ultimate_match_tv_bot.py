import os
import asyncio
import logging
import random
import json
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import aiohttp
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from io import BytesIO
import base64

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
 )

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from advanced_content_generator import AdvancedContentGenerator
from interactive_handler import InteractiveHandler
from database_manager import DatabaseManager
from error_handler import ErrorHandler

class UltimateMatchTVBot:
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Saudi Football TV Bot –≤ —Å—Ç–∏–ª–µ –ú–∞—Ç—á –¢–í
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 15-30 –º–∏–Ω—É—Ç
    - –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–≤—å—é –∏ –æ–±–∑–æ—Ä—ã –º–∞—Ç—á–µ–π
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–æ–≤
    - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    - –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–ª—É—Ö–∏
    """
    
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.bot_token = "7541467929:AAGLOxsVGckECmbRJX9xIxiaFXuzDcOHbNQ"
        self.channel_id = "-1002643651612"
        self.db_path = 'ultimate_match_tv_bot.db'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.content_generator = AdvancedContentGenerator(self.db_path)
        self.interactive_handler = InteractiveHandler(self.db_path)
        self.db_manager = DatabaseManager(self.db_path)
        self.error_handler = ErrorHandler(self.logger)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            'posts_sent': 0,
            'users_interacted': 0,
            'errors_handled': 0,
            'start_time': datetime.now()
        }
        
        self.logger.info("üöÄ Ultimate Saudi Football TV Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.interactive_handler.handle_start_command))
        self.app.add_handler(CommandHandler("menu", self.interactive_handler.handle_menu_command))
        self.app.add_handler(CommandHandler("stats", self.handle_bot_stats))
        self.app.add_handler(CommandHandler("help", self.handle_help))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_menu_command, pattern="^main_menu$"))
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_teams_menu, pattern="^teams_menu$"))
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_players_menu, pattern="^players_menu$"))
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_statistics_menu, pattern="^statistics_menu$"))
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_my_subscriptions, pattern="^my_subscriptions$"))
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_settings, pattern="^settings$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_team_info, pattern="^team_"))
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_player_info, pattern="^player_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.interactive_handler.handle_subscription, pattern="^(subscribe|unsubscribe)_(team|player)_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.app.add_handler(CallbackQueryHandler(self.handle_current_table, pattern="^current_table$"))
        self.app.add_handler(CallbackQueryHandler(self.handle_top_scorers, pattern="^top_scorers$"))
        self.app.add_handler(CallbackQueryHandler(self.handle_fixtures, pattern="^fixtures$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler.handle_telegram_error)
    async def handle_bot_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        uptime = datetime.now() - self.stats['start_time']
        
        stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üöÄ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days} –¥–Ω–µ–π, {uptime.seconds // 3600} —á–∞—Å–æ–≤
üì∞ –ü–æ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['posts_sent']}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–æ: {self.stats['users_interacted']}
‚ö†Ô∏è –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['errors_handled']}

üî• –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ
üì° –ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: –∫–∞–∂–¥—ã–µ 15-30 –º–∏–Ω—É—Ç
üéØ –†–µ–∂–∏–º: Saudi Football TV (–ú–∞—Ç—á –¢–í —Å—Ç–∏–ª—å)

#BotStats #SaudiFootballTV"""

        await update.message.reply_text(stats_text)

    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        help_text = """‚ÑπÔ∏è –ü–û–ú–û–©–¨ - Saudi Football TV Bot

ü§ñ –û –ë–û–¢–ï:
–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ñ—É—Ç–±–æ–ª–∞!

üìã –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üî• –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ üì∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15-30 –º–∏–Ω—É—Ç
‚Ä¢ ‚öΩ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–≤—å—é –∏ –æ–±–∑–æ—Ä—ã –º–∞—Ç—á–µ–π
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ üåü –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∑–≤–µ–∑–¥–∞—Ö –ª–∏–≥–∏
‚Ä¢ üß† –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üí∞ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã/–∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ üìà –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª—é–±–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–≤–µ–∑–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π

üì± –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏–≥—Ä–æ–∫–æ–≤
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏!

üÜò –ü–û–î–î–ï–†–ñ–ö–ê:
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–º–æ—â—å"

#Help #SaudiFootballTV #MatchTV"""

        await update.message.reply_text(help_text)

    async def handle_current_table(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            table_image = await self.generate_league_table_image()
            
            table_text = """üèÜ –¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê Saudi Pro League

–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"""

            keyboard = [[InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if table_image:
                await update.callback_query.edit_message_media(
                    media=InputMediaPhoto(media=table_image, caption=table_text),
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                table_text += self._generate_text_table()
                await update.callback_query.edit_message_text(table_text, reply_markup=reply_markup)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_top_scorers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤"""
        scorers_text = """‚öΩ –¢–û–ü-–ë–û–ú–ë–ê–†–î–ò–†–´ Saudi Pro League

ü•á 1. –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É (–ê–ª—å-–ù–∞—Å—Å—Ä) - 22 –≥–æ–ª–∞
ü•à 2. –ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞ (–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥) - 18 –≥–æ–ª–æ–≤  
ü•â 3. –ê–ª–µ–∫—Å–∞–Ω–¥–∞—Ä –ú–∏—Ç—Ä–æ–≤–∏—á (–ê–ª—å-–•–∏–ª—è–ª—å) - 16 –≥–æ–ª–æ–≤
4. –°–∞–¥–∏–æ –ú–∞–Ω–µ (–ê–ª—å-–ù–∞—Å—Å—Ä) - 14 –≥–æ–ª–æ–≤
5. –ú–∞–ª–∫–æ–º (–ê–ª—å-–•–∏–ª—è–ª—å) - 12 –≥–æ–ª–æ–≤
6. –†–∏—è–¥ –ú–∞—Ö—Ä–µ–∑ (–ê–ª—å-–ê—Ö–ª–∏) - 11 –≥–æ–ª–æ–≤
7. –†–æ–±–µ—Ä—Ç–æ –§–∏—Ä–º–∏–Ω–æ (–ê–ª—å-–ê—Ö–ª–∏) - 10 –≥–æ–ª–æ–≤
8. –§–∞–±–∏–Ω—å–æ (–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥) - 8 –≥–æ–ª–æ–≤
9. –ù'–ì–æ–ª–æ –ö–∞–Ω—Ç–µ (–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥) - 6 –≥–æ–ª–æ–≤
10. –°–∞–ª–µ–º –∞–ª—å-–î–æ—Å–∞—Ä–∏ (–ê–ª—å-–•–∏–ª—è–ª—å) - 6 –≥–æ–ª–æ–≤

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

#TopScorers #SaudiProLeague #Goals"""

        keyboard = [[InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(scorers_text, reply_markup=reply_markup)

    async def handle_fixtures(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π"""
        fixtures_text = """üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–¢–ß–ï–ô Saudi Pro League

üóìÔ∏è –ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò:

üìç –°–ï–ì–û–î–ù–Ø:
‚Ä¢ 20:00 - –ê–ª—å-–•–∏–ª—è–ª—å vs –ê–ª—å-–®–∞–±–∞–±
‚Ä¢ 22:30 - –ê–ª—å-–§–∞—Ç–µ—Ö vs –ê–ª—å-–¢–∞–∞–≤—É–Ω

üìç –ó–ê–í–¢–†–ê:
‚Ä¢ 18:00 - –ê–ª—å-–ù–∞—Å—Å—Ä vs –ê–ª—å-–ê—Ö–ª–∏
‚Ä¢ 20:30 - –ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥ vs –ê–ª—å-–í–µ—Ö–¥–∞

üìç –ü–û–°–õ–ï–ó–ê–í–¢–†–ê:
‚Ä¢ 19:00 - –ê–ª—å-–≠—Ç–∏—Ñ–∞–∫ vs –ê–ª—å-–•–∞–∑–º
‚Ä¢ 21:00 - –ê–ª—å-–†–∞–π—è–Ω vs –ê–ª—å-–§–µ–π—Ö–∞

üì∫ –í—Å–µ –º–∞—Ç—á–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—Ç—Å—è –Ω–∞ SSC Sport 1

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö!

#Fixtures #SaudiProLeague #Schedule"""

        keyboard = [
            [InlineKeyboardButton("‚öΩ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É", callback_data="teams_menu")],
            [InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(fixtures_text, reply_markup=reply_markup)

    async def generate_league_table_image(self) -> Optional[BytesIO]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            fig, ax = plt.subplots(figsize=(12, 10))
            ax.axis('off')
            
            # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            teams_data = [
                ["1", "–ê–ª—å-–•–∏–ª—è–ª—å", "25", "20", "5", "0", "68", "15", "65"],
                ["2", "–ê–ª—å-–ù–∞—Å—Å—Ä", "25", "18", "6", "1", "62", "20", "60"],
                ["3", "–ê–ª—å-–ê—Ö–ª–∏", "25", "16", "7", "2", "55", "25", "55"],
                ["4", "–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥", "25", "15", "5", "5", "50", "30", "50"],
                ["5", "–ê–ª—å-–®–∞–±–∞–±", "25", "12", "8", "5", "42", "35", "44"],
                ["6", "–ê–ª—å-–§–∞—Ç–µ—Ö", "25", "11", "6", "8", "38", "40", "39"],
                ["7", "–ê–ª—å-–¢–∞–∞–≤—É–Ω", "25", "10", "7", "8", "35", "38", "37"],
                ["8", "–ê–ª—å-–í–µ—Ö–¥–∞", "25", "9", "8", "8", "32", "35", "35"]
            ]
            
            headers = ["#", "–ö–æ–º–∞–Ω–¥–∞", "–ò", "–ü", "–ù", "–ü—Ä", "–ó–ì", "–ü–ì", "–û"]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table = ax.table(cellText=teams_data, colLabels=headers, 
                           cellLoc='center', loc='center',
                           colWidths=[0.08, 0.25, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08])
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            table.auto_set_font_size(False)
            table.set_fontsize(10)
            table.scale(1, 2)
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–æ–Ω —Ç–∞–±–ª–∏—Ü—ã
            for i in range(len(headers)):
                table[(0, i)].set_facecolor('#1f4e79')  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                table[(0, i)].set_text_props(weight='bold', color='white')
            
            # –ó–æ–Ω–∞ –õ–∏–≥–∏ –ß–µ–º–ø–∏–æ–Ω–æ–≤ (1-4 –º–µ—Å—Ç–∞)
            for i in range(1, 5):
                for j in range(len(headers)):
                    table[(i, j)].set_facecolor('#e8f5e8')
            
            # –ó–æ–Ω–∞ –≤—ã–ª–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—Ç–∞)
            for i in range(7, 9):
                for j in range(len(headers)):
                    table[(i, j)].set_facecolor('#ffe8e8')
            
            plt.title('Saudi Pro League - –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', 
                     fontsize=16, fontweight='bold', pad=20)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            img_buffer = BytesIO()
            plt.savefig(img_buffer, format='PNG', dpi=300, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close()
            
            return img_buffer
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None

    def _generate_text_table(self) -> str:
        """
1. –ê–ª—å-–•–∏–ª—è–ª—å    | 25 | 65 –æ—á–∫–æ–≤
2. –ê–ª—å-–ù–∞—Å—Å—Ä     | 25 | 60 –æ—á–∫–æ–≤  
3. –ê–ª—å-–ê—Ö–ª–∏      | 25 | 55 –æ—á–∫–æ–≤
4. –ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥   | 25 | 50 –æ—á–∫–æ–≤
5. –ê–ª—å-–®–∞–±–∞–±     | 25 | 44 –æ—á–∫–∞
6. –ê–ª—å-–§–∞—Ç–µ—Ö     | 25 | 39 –æ—á–∫–æ–≤
7. –ê–ª—å-–¢–∞–∞–≤—É–Ω    | 25 | 37 –æ—á–∫–æ–≤
8. –ê–ª—å-–í–µ—Ö–¥–∞     | 25 | 35 –æ—á–∫–æ–≤

üü¢ –ó–æ–Ω–∞ –õ–∏–≥–∏ –ß–µ–º–ø–∏–æ–Ω–æ–≤ (1-4)
üî¥ –ó–æ–Ω–∞ –≤—ã–ª–µ—Ç–∞ (15-18)"""

    async def send_urgent_news(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–æ—á–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
            urgent_templates = [
                "üî• –°–†–û–ß–ù–û: {content}",
                "‚ö° –ú–û–õ–ù–ò–Ø: {content}",
                "üö® BREAKING: {content}",
                "üì¢ –≠–ö–°–¢–†–ï–ù–ù–û: {content}"
            ]
            
            urgent_content = [
                f"–ê–ª—å-–•–∏–ª—è–ª—å –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–µ—à–∞—é—â–µ–º—É –º–∞—Ç—á—É –ø—Ä–æ—Ç–∏–≤ –ê–ª—å-–ù–∞—Å—Å—Ä",
                f"–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É –ø–æ–∫–∞–∑–∞–ª —Ñ–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ",
                f"–ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –∏–∑-–∑–∞ —Ç—Ä–∞–≤–º—ã",
                f"–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –º–∞—Ç—á–µ –ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥",
                f"–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã: –ê–ª—å-–ê—Ö–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∑–≤–µ–∑–¥–æ–π –ï–≤—Ä–æ–ø—ã",
                f"–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤–µ –ê–ª—å-–®–∞–±–∞–± –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º –º–∞—Ç—á–µ–º"
            ]
            
            template = random.choice(urgent_templates)
            content = random.choice(urgent_content)
            
            message = template.format(content=content)
            message += f"\n\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            message += "\n\n#UrgentNews #SaudiProLeague #Breaking"
            
            await self.app.bot.send_message(chat_id=self.channel_id, text=message)
            
            self.stats['posts_sent'] += 1
            self.logger.info("‚úÖ –°—Ä–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            self.stats['errors_handled'] += 1

    async def send_full_news(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_types = [
                'detailed_match_preview',
                'detailed_match_result', 
                'player_spotlight',
                'tactical_analysis',
                'transfer_news'
            ]
            
            content_type = random.choice(content_types)
            
            if content_type == 'detailed_match_preview':
                teams = list(self.content_generator.saudi_teams.keys())
                home_team, away_team = random.sample(teams, 2)
                match_data = {
                    'home_team': home_team,
                    'away_team': away_team,
                    'match_date': (datetime.now() + timedelta(days=random.randint(1, 7))).strftime('%d.%m.%Y'),
                    'match_time': f"{random.randint(18, 22)}:00"
                }
                message = self.content_generator.generate_detailed_match_preview(match_data)
                
            elif content_type == 'detailed_match_result':
                teams = list(self.content_generator.saudi_teams.keys())
                home_team, away_team = random.sample(teams, 2)
                match_data = {
                    'home_team': home_team,
                    'away_team': away_team,
                    'home_score': random.randint(0, 4),
                    'away_score': random.randint(0, 4)
                }
                message = self.content_generator.generate_detailed_match_result(match_data)
                
            elif content_type == 'player_spotlight':
                message = self.content_generator.generate_player_spotlight()
                
            elif content_type == 'tactical_analysis':
                message = self.content_generator.generate_tactical_analysis()
                
            else:  # transfer_news
                message = self.content_generator.generate_transfer_news()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.app.bot.send_message(chat_id=self.channel_id, text=message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db_manager.save_post(message, content_type)
            
            self.stats['posts_sent'] += 1
            self.logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {content_type}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            await self.send_personalized_notifications(message, content_type)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            self.stats['errors_handled'] += 1

    async def send_personalized_notifications(self, message: str, content_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            mentioned_teams = []
            mentioned_players = []
            
            for team in self.content_generator.saudi_teams.keys():
                if team in message:
                    mentioned_teams.append(team)
            
            for player in self.content_generator.player_database.keys():
                if player in message:
                    mentioned_players.append(player)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notified_users = set()
            
            for team in mentioned_teams:
                subscribers = self.interactive_handler.get_subscribed_users(team, 'team')
                for user_id in subscribers:
                    if user_id not in notified_users:
                        try:
                            notification = f"üîî –ù–æ–≤–æ—Å—Ç—å –æ {team}:\n\n{message[:500]}..."
                            await self.app.bot.send_message(chat_id=user_id, text=notification)
                            notified_users.add(user_id)
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            for player in mentioned_players:
                subscribers = self.interactive_handler.get_subscribed_users(player, 'player')
                for user_id in subscribers:
                    if user_id not in notified_users:
                        try:
                            notification = f"üîî –ù–æ–≤–æ—Å—Ç—å –æ {player}:\n\n{message[:500]}..."
                            await self.app.bot.send_message(chat_id=user_id, text=notification)
                            notified_users.add(user_id)
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            if notified_users:
                self.logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(notified_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def send_daily_schedule(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00)"""
        try:
            schedule_message = """üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–¢–ß–ï–ô –ù–ê –°–ï–ì–û–î–ù–Ø

‚öΩ Saudi Pro League - –¢—É—Ä 26

üïê 18:00 - –ê–ª—å-–•–∏–ª—è–ª—å vs –ê–ª—å-–®–∞–±–∞–±
   üìç –°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –§–∞—Ö–¥–∞, –≠—Ä-–†–∏—è–¥
   üì∫ SSC Sport 1

üïê 20:30 - –ê–ª—å-–ù–∞—Å—Å—Ä vs –ê–ª—å-–ê—Ö–ª–∏  
   üìç –°—Ç–∞–¥–∏–æ–Ω –ú—Ä—Å—É–ª –ü–∞—Ä–∫, –≠—Ä-–†–∏—è–¥
   üì∫ SSC Sport 2

üïê 22:00 - –ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥ vs –ê–ª—å-–§–∞—Ç–µ—Ö
   üìç –°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –ê–±–¥—É–ª–ª—ã, –î–∂–∏–¥–¥–∞
   üì∫ SSC Sport 1

üî• –ì–õ–ê–í–ù–´–ô –ú–ê–¢–ß –î–ù–Ø:
–ê–ª—å-–ù–∞—Å—Å—Ä vs –ê–ª—å-–ê—Ö–ª–∏ - –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ –†–æ–Ω–∞–ª–¥—É –∏ –ú–∞—Ö—Ä–µ–∑–∞!

üìä –ü—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–≤—å—é –º–∞—Ç—á–µ–π - –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è

#Schedule #SaudiProLeague #MatchDay"""

            await self.app.bot.send_message(chat_id=self.channel_id, text=schedule_message)
            
            self.stats['posts_sent'] += 1
            self.logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            self.stats['errors_handled'] += 1

    async def send_weekly_table(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00)"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_image = await self.generate_league_table_image()
            
            table_message = """üèÜ –¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê Saudi Pro League

üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–∞:

üî• –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –¢–û–ü–ï:
‚Ä¢ –ê–ª—å-–•–∏–ª—è–ª—å —É–∫—Ä–µ–ø–ª—è–µ—Ç –ª–∏–¥–µ—Ä—Å—Ç–≤–æ (+3 –æ—á–∫–∞)
‚Ä¢ –ê–ª—å-–ù–∞—Å—Å—Ä —Å–æ–∫—Ä–∞—â–∞–µ—Ç –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –¥–æ 5 –æ—á–∫–æ–≤
‚Ä¢ –ë–æ—Ä—å–±–∞ –∑–∞ —Ç–æ–ø-4 –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è

üìà –î–í–ò–ñ–ï–ù–ò–ï –í –¢–ê–ë–õ–ò–¶–ï:
‚ÜóÔ∏è –ê–ª—å-–®–∞–±–∞–± –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ 5 –º–µ—Å—Ç–æ
‚ÜòÔ∏è –ê–ª—å-–§–∞—Ç–µ—Ö –æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ 6 –ø–æ–∑–∏—Ü–∏—é

üéØ –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´:
‚Ä¢ –õ—É—á—à–∞—è –∞—Ç–∞–∫–∞: –ê–ª—å-–•–∏–ª—è–ª—å (68 –≥–æ–ª–æ–≤)
‚Ä¢ –õ—É—á—à–∞—è –æ–±–æ—Ä–æ–Ω–∞: –ê–ª—å-–•–∏–ª—è–ª—å (15 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö)
‚Ä¢ –°–∞–º–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: –ê–ª—å-–ù–∞—Å—Å—Ä

#Table #SaudiProLeague #Standings"""

            if table_image:
                await self.app.bot.send_photo(
                    chat_id=self.channel_id,
                    photo=table_image,
                    caption=table_message
                )
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                table_message += self._generate_text_table()
                await self.app.bot.send_message(chat_id=self.channel_id, text=table_message)
            
            self.stats['posts_sent'] += 1
            self.logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            self.stats['errors_handled'] += 1

    async def setup_scheduled_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        job_queue = self.app.job_queue
        
        # –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            lambda context: asyncio.create_task(self.send_urgent_news()),
            interval=900,  # 15 –º–∏–Ω—É—Ç
            first=60,
            name="urgent_news"
        )
        
        # –ü–æ–ª–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            lambda context: asyncio.create_task(self.send_full_news()),
            interval=1800,  # 30 –º–∏–Ω—É—Ç
            first=120,
            name="full_news"
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ 9:00
        job_queue.run_daily(
            lambda context: asyncio.create_task(self.send_daily_schedule()),
            time=datetime.strptime("09:00", "%H:%M").time(),
            name="daily_schedule"
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
        job_queue.run_daily(
            lambda context: asyncio.create_task(self.send_weekly_table()),
            time=datetime.strptime("10:00", "%H:%M").time(),
            days=(0,),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (0=Sunday, 1=Monday, ..., 6=Saturday)
            name="weekly_table"
        )        
        self.logger.info("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ ULTIMATE Saudi Football TV Bot v3.0...")
            self.logger.info(f"üì± –ö–∞–Ω–∞–ª: {self.channel_id}")
            self.logger.info("üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´:")
            self.logger.info("   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API")
            self.logger.info("   ‚Ä¢ –£–º–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
            self.logger.info("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            self.logger.info("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            self.logger.info("   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            self.logger.info("   ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
            self.logger.info("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è")
            self.logger.info("   ‚Ä¢ –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.logger.info("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            self.logger.info("   ‚Ä¢ –°—Ç–∏–ª—å –ú–∞—Ç—á –¢–í")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await self.setup_scheduled_jobs()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            start_message = """üöÄ SAUDI FOOTBALL TV BOT –ó–ê–ü–£–©–ï–ù!

üî• –†–µ–∂–∏–º: ULTIMATE (–ú–∞—Ç—á –¢–í —Å—Ç–∏–ª—å)
üì° –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ 15-30 –º–∏–Ω—É—Ç
üéØ –ö–æ–Ω—Ç–µ–Ω—Ç: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è

‚ú® –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üß† –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üí∞ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ üåü –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∑–≤–µ–∑–¥–∞—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!

#BotLaunched #SaudiFootballTV #Ultimate"""

            await self.app.bot.send_message(chat_id=self.channel_id, text=start_message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.app.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = UltimateMatchTVBot()
    bot.app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
