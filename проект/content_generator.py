import random
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import logging

logger = logging.getLogger(__name__)

class ContentGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, database_manager=None):
        self.db = database_manager
        self.load_content_templates()
        self.load_football_data()
    
    def load_content_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (15 –º–∏–Ω—É—Ç)
        self.quick_news_templates = [
            "üî• {team} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–µ—à–∞—é—â–µ–º—É –º–∞—Ç—á—É - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–∞–¥—Ä—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "‚ö° {player} –ø–æ–∫–∞–∑–∞–ª —Ñ–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ",
            "üìà {team} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ",
            "üèÜ –¢—Ä–µ–Ω–µ—Ä {team} —Ä–∞—Å–∫—Ä—ã–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–∫—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º –º–∞—Ç—á–µ–º",
            "üí™ {player} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é –Ω–∞ –ø–æ–ª–µ",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç —Ä–æ—Å—Ç –ø–æ–∑–∏—Ü–∏–π {team} –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ",
            "üéØ {team} –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É—Å–∏–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–∞–≤–∞ –≤ –∑–∏–º–Ω–µ–µ –æ–∫–Ω–æ",
            "‚≠ê {player} –ø–æ–ª—É—á–∏–ª –æ—Å–æ–±–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—Ç –±–æ–ª–µ–ª—å—â–∏–∫–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
            "üîÑ {team} –º–µ–Ω—è–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ {team} –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ —Å–µ–∑–æ–Ω"
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (30 –º–∏–Ω—É—Ç)
        self.full_news_templates = [
            {
                "title": "{team} –æ–¥–µ—Ä–∂–∞–ª —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–±–µ–¥—É —Å–æ —Å—á–µ—Ç–æ–º {score} –Ω–∞–¥ {opponent}",
                "content": "–í –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ {tournament} –∫–æ–º–∞–Ω–¥–∞ {team} –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—É—é –∏–≥—Ä—É, –æ–±—ã–≥—Ä–∞–≤ {opponent} —Å–æ —Å—á–µ—Ç–æ–º {score}. –ö–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –ø–æ–±–µ–¥–µ —Å—ã–≥—Ä–∞–ª {player}, –∫–æ—Ç–æ—Ä—ã–π {achievement}. –¢—Ä–µ–Ω–µ—Ä –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ—Ç–∏–ª –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø–æ–±–µ–¥–µ.",
                "tags": ["–º–∞—Ç—á", "–ø–æ–±–µ–¥–∞", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç"]
            },
            {
                "title": "{player} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥, –∑–∞–±–∏–≤ {goals} –≥–æ–ª–æ–≤ –≤ –º–∞—Ç—á–µ –ø—Ä–æ—Ç–∏–≤ {opponent}",
                "content": "–ó–≤–µ–∑–¥–Ω—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π {team} {player} –≤–æ—à–µ–ª –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–∞—É–¥–æ–≤—Å–∫–æ–≥–æ —Ñ—É—Ç–±–æ–ª–∞, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í –º–∞—Ç—á–µ –ø—Ä–æ—Ç–∏–≤ {opponent} –æ–Ω –∑–∞–±–∏–ª {goals} –≥–æ–ª–æ–≤, –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ. –ë–æ–ª–µ–ª—å—â–∏–∫–∏ —É—Å—Ç—Ä–æ–∏–ª–∏ –æ–≤–∞—Ü–∏—é, –∞ —Ç—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± –≤—ã—Ä–∞–∑–∏–ª –≥–æ—Ä–¥–æ—Å—Ç—å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞.",
                "tags": ["—Ä–µ–∫–æ—Ä–¥", "–≥–æ–ª—ã", "–∏–≥—Ä–æ–∫"]
            },
            {
                "title": "{team} –æ–±—ä—è–≤–∏–ª –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ {player} –∑–∞ {amount} –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤",
                "content": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ {team} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å {player}. –°—É–º–º–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {amount} –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∞—É–¥–æ–≤—Å–∫–æ–≥–æ —Ñ—É—Ç–±–æ–ª–∞. –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –≥–æ—Ç–æ–≤ –¥–µ–±—é—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–º –º–∞—Ç—á–µ.",
                "tags": ["—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ", "–Ω–æ–≤–∏—á–æ–∫"]
            },
            {
                "title": "–¢—Ä–µ–Ω–µ—Ä {team} –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—É—é —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ö–µ–º—É –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Å–µ–∑–æ–Ω–∞",
                "content": "–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä {team} –ø—Ä–æ–≤–µ–ª –ø—Ä–µ—Å—Å-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ö–µ–º—É –∫–æ–º–∞–Ω–¥—ã. –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–≥—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Å–∏–ª–µ–Ω–∏–µ –∞—Ç–∞–∫—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –º—è—á–∞. –ò–≥—Ä–æ–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–∫—Ç–∏–∫—É –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö.",
                "tags": ["—Ç–∞–∫—Ç–∏–∫–∞", "—Ç—Ä–µ–Ω–µ—Ä", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"]
            },
            {
                "title": "{team} –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ {position} –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥",
                "content": "–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–π —Å–µ—Ä–∏–∏ –∏–∑ {wins} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥, {team} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ. –ö–æ–º–∞–Ω–¥–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–Ω–∏–º–∞–µ—Ç {position} –º–µ—Å—Ç–æ –∏ –∏–º–µ–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –µ–≤—Ä–æ–∫—É–±–∫–∏. –ö–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —É—Å–ø–µ—Ö–µ —Å—ã–≥—Ä–∞–ª–∏ {player} –∏ —Å–ª–∞–∂–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã.",
                "tags": ["—Ç–∞–±–ª–∏—Ü–∞", "–ø–æ–∑–∏—Ü–∏—è", "—É—Å–ø–µ—Ö"]
            }
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –º–∞—Ç—á–µ–π
        self.match_templates = [
            "üî• –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–∞—Ç—á —Ç—É—Ä–∞: {home} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {away}",
            "‚öΩ –ü—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ–µ –¥–µ—Ä–±–∏: {home} vs {away}",
            "üèÜ –ë–∏—Ç–≤–∞ –∑–∞ –æ—á–∫–∏: {home} –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å {away}",
            "üí• –ì–æ—Ä—è—á–∏–π –º–∞—Ç—á: {home} –ø—Ä–æ—Ç–∏–≤ {away}",
            "üéØ –ö–ª—é—á–µ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞: {home} - {away}"
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.table_templates = [
            "üìä **–¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê - –°–ê–£–î–û–í–°–ö–ê–Ø –ü–†–û –õ–ò–ì–ê**\n\n*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ {round} —Ç—É—Ä–∞*",
            "üèÜ **–ü–û–õ–û–ñ–ï–ù–ò–ï –ö–û–ú–ê–ù–î –í –ß–ï–ú–ü–ò–û–ù–ê–¢–ï**\n\n*–ë–æ—Ä—å–±–∞ –∑–∞ —Ç–∏—Ç—É–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!*",
            "üìà **–†–ï–ô–¢–ò–ù–ì –ö–û–ú–ê–ù–î –°–ê–£–î–û–í–°–ö–û–ô –õ–ò–ì–ò**\n\n*–ö—Ç–æ –ª–∏–¥–∏—Ä—É–µ—Ç –≤ –≥–æ–Ω–∫–µ –∑–∞ —á–µ–º–ø–∏–æ–Ω—Å—Ç–≤–æ?*"
        ]
    
    def load_football_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –°–∞—É–¥–æ–≤—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.saudi_teams = [
            {"name": "–ê–ª—å-–•–∏–ª—è–ª—å", "city": "–≠—Ä-–†–∏—è–¥", "founded": 1957, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –§–∞—Ö–¥–∞"},
            {"name": "–ê–ª—å-–ù–∞—Å—Å—Ä", "city": "–≠—Ä-–†–∏—è–¥", "founded": 1955, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ú—Ä—à—É–¥"},
            {"name": "–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥", "city": "–î–∂–∏–¥–¥–∞", "founded": 1927, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –ê–±–¥—É–ª–∞–∑–∏–∑–∞"},
            {"name": "–ê–ª—å-–ê—Ö–ª–∏", "city": "–î–∂–∏–¥–¥–∞", "founded": 1937, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –ê–±–¥—É–ª–ª—ã"},
            {"name": "–ê–ª—å-–®–∞–±–∞–±", "city": "–≠—Ä-–†–∏—è–¥", "founded": 1947, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ü—Ä–∏–Ω—Ü–∞ –§–µ–π—Å–∞–ª–∞"},
            {"name": "–ê–ª—å-–¢–∞–∞–≤—É–Ω", "city": "–ë—É—Ä–∞–π–¥–∞", "founded": 1956, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –ê–±–¥—É–ª–ª—ã"},
            {"name": "–ê–ª—å-–§–∞—Ç–µ—Ö", "city": "–≠–ª—å-–•—É—Ñ—É—Ñ", "founded": 1958, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ü—Ä–∏–Ω—Ü–∞ –ê–±–¥—É–ª–ª—ã"},
            {"name": "–ê–ª—å-–†–∞–π—è–Ω", "city": "–¢–∞–±—É–∫", "founded": 1967, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ü—Ä–∏–Ω—Ü–∞ –§–∞—Ö–¥–∞"},
            {"name": "–ê–ª—å-–í–µ–¥–∞", "city": "–ú–µ–∫–∫–∞", "founded": 1945, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –ê–±–¥—É–ª–∞–∑–∏–∑–∞"},
            {"name": "–î–∞–º–∞–∫", "city": "–•–∞–º–∏—Å-–ú—É—à–∞–π—Ç", "founded": 1972, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ü—Ä–∏–Ω—Ü–∞ –°—É–ª—Ç–∞–Ω–∞"},
            {"name": "–ê–ª—å-–•–∞–∑–º", "city": "–≠—Ä-–†–∞—Å—Å", "founded": 1957, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ü—Ä–∏–Ω—Ü–∞ –ê–±–¥—É–ª—Ä–∞—Ö–º–∞–Ω–∞"},
            {"name": "–ê–ª—å-–§–µ–π—Å–∞–ª–∏", "city": "–≠–ª—å-–ú–∞–¥–∂–º–∞–∞", "founded": 1954, "stadium": "–°—Ç–∞–¥–∏–æ–Ω –ü—Ä–∏–Ω—Ü–∞ –°–∞–ª–º–∞–Ω–∞"}
        ]
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–∞—É–¥–æ–≤—Å–∫–æ–π –ª–∏–≥–∏
        self.famous_players = [
            {"name": "–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É", "team": "–ê–ª—å-–ù–∞—Å—Å—Ä", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è"},
            {"name": "–°–∞–¥–∏–æ –ú–∞–Ω–µ", "team": "–ê–ª—å-–ù–∞—Å—Å—Ä", "position": "–ö—Ä–∞–π–Ω–∏–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–°–µ–Ω–µ–≥–∞–ª"},
            {"name": "–†–∏—è–¥ –ú–∞—Ä–µ–∑", "team": "–ê–ª—å-–ê—Ö–ª–∏", "position": "–ö—Ä–∞–π–Ω–∏–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–ê–ª–∂–∏—Ä"},
            {"name": "–ù'–ì–æ–ª–æ –ö–∞–Ω—Ç–µ", "team": "–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "nationality": "–§—Ä–∞–Ω—Ü–∏—è"},
            {"name": "–ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞", "team": "–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–§—Ä–∞–Ω—Ü–∏—è"},
            {"name": "–†–æ–±–µ—Ä—Ç–æ –§–∏—Ä–º–∏–Ω–æ", "team": "–ê–ª—å-–ê—Ö–ª–∏", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–ë—Ä–∞–∑–∏–ª–∏—è"},
            {"name": "–ù–µ–π–º–∞—Ä", "team": "–ê–ª—å-–•–∏–ª—è–ª—å", "position": "–ö—Ä–∞–π–Ω–∏–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–ë—Ä–∞–∑–∏–ª–∏—è"},
            {"name": "–ú–∞–ª–∫–æ–º", "team": "–ê–ª—å-–•–∏–ª—è–ª—å", "position": "–ö—Ä–∞–π–Ω–∏–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π", "nationality": "–ë—Ä–∞–∑–∏–ª–∏—è"},
            {"name": "–§–∞–±–∏–Ω—å–æ", "team": "–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "nationality": "–ë—Ä–∞–∑–∏–ª–∏—è"},
            {"name": "–ú–∏–ª–∏–Ω–∫–æ–≤–∏—á-–°–∞–≤–∏—á", "team": "–ê–ª—å-–•–∏–ª—è–ª—å", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "nationality": "–°–µ—Ä–±–∏—è"}
        ]
        
        # –¢—É—Ä–Ω–∏—Ä—ã
        self.tournaments = [
            "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ü—Ä–æ –õ–∏–≥–∞",
            "–ö—É–±–æ–∫ –°–∞—É–¥–æ–≤—Å–∫–æ–π –ê—Ä–∞–≤–∏–∏",
            "–°—É–ø–µ—Ä–∫—É–±–æ–∫ –°–∞—É–¥–æ–≤—Å–∫–æ–π –ê—Ä–∞–≤–∏–∏",
            "–ê–∑–∏–∞—Ç—Å–∫–∞—è –õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤",
            "–ö—É–±–æ–∫ –ö–æ—Ä–æ–ª—è –°–∞–ª–º–∞–Ω–∞"
        ]
        
        # –¢–í –∫–∞–Ω–∞–ª—ã
        self.tv_channels = [
            "SSC Sport 1", "SSC Sport 2", "SSC Sport 3",
            "beIN Sports 1", "beIN Sports 2",
            "Dubai Sports", "Abu Dhabi Sports",
            "KSA Sports", "Saudi Sports"
        ]
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        self.player_achievements = [
            "–∑–∞–±–∏–ª —Ä–µ—à–∞—é—â–∏–π –≥–æ–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∏–Ω—É—Ç–∞—Ö",
            "—Å–¥–µ–ª–∞–ª –≥–æ–ª–µ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É",
            "–æ—Ç—Ä–∞–∑–∏–ª –ø–µ–Ω–∞–ª—å—Ç–∏",
            "–∑–∞–±–∏–ª –¥—É–±–ª—å",
            "–æ—Ñ–æ—Ä–º–∏–ª —Ö–µ—Ç-—Ç—Ä–∏–∫",
            "–ø–æ–ª—É—á–∏–ª –∂–µ–ª—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞ –≥—Ä—É–±—É—é –∏–≥—Ä—É",
            "–±—ã–ª —É–¥–∞–ª–µ–Ω —Å –ø–æ–ª—è",
            "—Å—Ç–∞–ª –ª—É—á—à–∏–º –∏–≥—Ä–æ–∫–æ–º –º–∞—Ç—á–∞",
            "—É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏",
            "–ø—Ä–æ–≤–µ–ª 90 –º–∏–Ω—É—Ç –±–µ–∑ –∑–∞–º–µ–Ω"
        ]
    
    def generate_smart_quick_news(self, use_real_data: bool = True) -> Dict:
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–î, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if use_real_data and self.db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î
            recent_matches = self.db.get_today_matches()
            if recent_matches:
                match = random.choice(recent_matches)
                template = random.choice([
                    f"üî• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Ç—á—É: {match['home']} vs {match['away']} –≤ {match['time']}",
                    f"‚öΩ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π {match['home']} - {match['away']}",
                    f"üì∫ –ú–∞—Ç—á {match['home']} –ø—Ä–æ—Ç–∏–≤ {match['away']} –ø–æ–∫–∞–∂–µ—Ç {match['tv']}"
                ])
                
                content = f"–ö–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º—É –º–∞—Ç—á—É –≤ —Ä–∞–º–∫–∞—Ö {match['tournament']}. –ë–æ–ª–µ–ª—å—â–∏–∫–∏ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
                
                return {
                    'title': template,
                    'content': content,
                    'news_type': 'quick_real',
                    'source': 'database',
                    'importance': 2
                }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤
        team_data = random.choice(self.saudi_teams)
        player_data = random.choice(self.famous_players)
        
        template = random.choice(self.quick_news_templates)
        title = template.format(
            team=team_data['name'],
            player=player_data['name']
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –Ω–æ–≤–æ—Å—Ç–∏
        content_options = [
            f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–ª—É–±–µ —Å–æ–æ–±—â–∞—é—Ç –æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–º–∞–Ω–¥–µ {team_data['name']}.",
            f"–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ {team_data['name']}.",
            f"–ë–æ–ª–µ–ª—å—â–∏–∫–∏ {team_data['name']} –≤—ã—Ä–∞–∂–∞—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–∞–Ω–¥–µ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏.",
            f"–¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± {team_data['name']} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.",
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ {team_data['name']} —Å—Ä–µ–¥–∏ —Ñ–∞–Ω–∞—Ç–æ–≤."
        ]
        
        return {
            'title': title,
            'content': random.choice(content_options),
            'news_type': 'quick_generated',
            'source': 'generator',
            'tags': ['—Å—Ä–æ—á–Ω–æ', team_data['name']],
            'importance': 1
        }
    
    def generate_smart_full_news(self, use_real_data: bool = True) -> List[Dict]:
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        news_list = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3-5 –Ω–æ–≤–æ—Å—Ç–µ–π
        for _ in range(random.randint(3, 5)):
            template = random.choice(self.full_news_templates)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            team_data = random.choice(self.saudi_teams)
            opponent_data = random.choice([t for t in self.saudi_teams if t != team_data])
            player_data = random.choice([p for p in self.famous_players if p['team'] == team_data['name']])
            
            if not player_data:
                player_data = random.choice(self.famous_players)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            score = f"{random.randint(1, 4)}-{random.randint(0, 3)}"
            goals = random.randint(1, 3)
            amount = random.randint(10, 80)
            position = random.randint(1, 8)
            wins = random.randint(3, 7)
            achievement = random.choice(self.player_achievements)
            tournament = random.choice(self.tournaments)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
            title = template['title'].format(
                team=team_data['name'],
                opponent=opponent_data['name'],
                player=player_data['name'],
                score=score,
                goals=goals,
                amount=amount,
                position=position
            )
            
            content = template['content'].format(
                team=team_data['name'],
                opponent=opponent_data['name'],
                player=player_data['name'],
                score=score,
                goals=goals,
                amount=amount,
                position=position,
                wins=wins,
                achievement=achievement,
                tournament=tournament
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            extended_content = content + f" –ú–∞—Ç—á –ø—Ä–æ—Ö–æ–¥–∏–ª –Ω–∞ —Å—Ç–∞–¥–∏–æ–Ω–µ {team_data['stadium']} –≤ –≥–æ—Ä–æ–¥–µ {team_data['city']}."
            
            news_item = {
                'title': title,
                'content': extended_content,
                'summary': content[:100] + "...",
                'news_type': 'full_generated',
                'source': 'generator',
                'tags': template['tags'] + [team_data['name'], player_data['name']],
                'importance': random.randint(1, 3),
                'time': (datetime.now() - timedelta(hours=random.randint(1, 6))).strftime('%H:%M')
            }
            
            news_list.append(news_item)
        
        return news_list
    
    def generate_smart_matches(self, date: str = None) -> List[Dict]:
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π"""
        
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ë–î, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.db:
            real_matches = self.db.get_today_matches()
            if real_matches:
                return real_matches
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—á–∏
        matches = []
        
        # –°–ª—É—á–∞–π–Ω–æ —Ä–µ—à–∞–µ–º, –±—É–¥—É—Ç –ª–∏ –º–∞—Ç—á–∏ (80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.2:
            return []
        
        num_matches = random.randint(1, 4)
        used_teams = set()
        
        for _ in range(num_matches):
            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏–≥—Ä–∞—é—Ç
            available_teams = [t for t in self.saudi_teams if t['name'] not in used_teams]
            
            if len(available_teams) < 2:
                break
            
            home_team = random.choice(available_teams)
            away_team = random.choice([t for t in available_teams if t != home_team])
            
            used_teams.add(home_team['name'])
            used_teams.add(away_team['name'])
            
            match = {
                'home': home_team['name'],
                'away': away_team['name'],
                'time': f"{random.randint(15, 22)}:{random.choice(['00', '30'])}",
                'tournament': random.choice(self.tournaments),
                'tv': random.choice(self.tv_channels),
                'venue': home_team['stadium'],
                'status': 'scheduled'
            }
            
            matches.append(match)
        
        return matches
    
    def generate_smart_league_table(self) -> List[Dict]:
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ë–î, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.db:
            real_table = self.db.get_league_standings()
            if real_table:
                return real_table
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        table = []
        
        for i, team_data in enumerate(self.saudi_teams):
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            games = random.randint(25, 30)
            wins = max(0, random.randint(8, 20) - i)  # –õ–∏–¥–µ—Ä—ã –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ
            losses = max(0, random.randint(2, 12) + i//2)  # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ
            draws = games - wins - losses
            
            goals_for = wins * random.randint(1, 3) + draws * random.randint(0, 2)
            goals_against = losses * random.randint(1, 3) + draws * random.randint(0, 2)
            goal_difference = goals_for - goals_against
            points = wins * 3 + draws
            
            table.append({
                'name': team_data['name'],
                'position': i + 1,
                'games': games,
                'wins': wins,
                'draws': draws,
                'losses': losses,
                'goals_for': goals_for,
                'goals_against': goals_against,
                'goal_difference': goal_difference,
                'points': points,
                'city': team_data['city'],
                'stadium': team_data['stadium']
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º –∏ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ–≤
        table.sort(key=lambda x: (x['points'], x['goal_difference']), reverse=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for i, team in enumerate(table):
            team['position'] = i + 1
        
        return table
    
    def format_league_table_message(self, table: List[Dict], detailed: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        header = random.choice(self.table_templates)
        
        if detailed:
            text = header + "\n\n```\n"
            text += "–ü–æ–∑ –ö–æ–º–∞–Ω–¥–∞           –ò  –ü  –ù  –ü—Ä –ì–ó –ì–ü  –û\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
            for team in table[:12]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-12
                name = team['name'][:12].ljust(12)
                text += f"{team['position']:2d}. {name} {team['games']:2d} {team['wins']:2d} {team['draws']:2d} {team['losses']:2d} {team['goals_for']:2d} {team['goals_against']:2d} {team['points']:2d}\n"
        else:
            text = header + "\n\n```\n"
            text += "–ü–æ–∑ –ö–æ–º–∞–Ω–¥–∞           –ò  –û\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
            for team in table[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-8
                name = team['name'][:12].ljust(12)
                text += f"{team['position']:2d}. {name} {team['games']:2d} {team['points']:2d}\n"
        
        text += "```\n\n"
        text += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        text += "üèÜ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!"
        
        return text
    
    def format_matches_message(self, matches: List[Dict], date: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        if not date:
            date = datetime.now().strftime('%d.%m.%Y')
        
        text = f"‚öΩ **–ú–ê–¢–ß–ò –ù–ê –°–ï–ì–û–î–ù–Ø ({date})**\n\n"
        
        if matches:
            for i, match in enumerate(matches, 1):
                match_template = random.choice(self.match_templates)
                match_title = match_template.format(
                    home=match['home'],
                    away=match['away']
                )
                
                text += f"**{i}. {match_title}**\n"
                text += f"üïê {match['time']}\n"
                text += f"üèÜ {match['tournament']}\n"
                text += f"üì∫ {match['tv']}\n"
                if 'venue' in match:
                    text += f"üèüÔ∏è {match['venue']}\n"
                text += "\n"
        else:
            text += "üòî –ù–∞ —Å–µ–≥–æ–¥–Ω—è –º–∞—Ç—á–µ–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ\n\n"
            text += "üìÖ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º - —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –∏–≥—Ä—ã!\n\n"
        
        text += "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
        
        return text
    
    def get_content_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        stats = {
            'teams_count': len(self.saudi_teams),
            'players_count': len(self.famous_players),
            'tournaments_count': len(self.tournaments),
            'quick_templates': len(self.quick_news_templates),
            'full_templates': len(self.full_news_templates),
            'match_templates': len(self.match_templates),
            'table_templates': len(self.table_templates)
        }
        
        if self.db:
            db_stats = self.db.get_database_stats()
            stats.update(db_stats)
        
        return stats

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    generator = ContentGenerator()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    quick_news = generator.generate_smart_quick_news(use_real_data=False)
    print(f"‚ö° –°—Ä–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: {quick_news['title']}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    full_news = generator.generate_smart_full_news(use_real_data=False)
    print(f"üì∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(full_news)} –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç—á–µ–π
    matches = generator.generate_smart_matches()
    print(f"‚öΩ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
    table = generator.generate_smart_league_table()
    print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å {len(table)} –∫–æ–º–∞–Ω–¥–∞–º–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = generator.get_content_stats()
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

