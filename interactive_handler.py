import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

class InteractiveHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –≤ —Å—Ç–∏–ª–µ –ú–∞—Ç—á –¢–í"""
    
    def __init__(self, db_path: str = 'match_tv_bot.db'):
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)
        self._init_user_database()
        
    def _init_user_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_subscriptions (
                    user_id INTEGER,
                    team_name TEXT,
                    player_name TEXT,
                    subscription_type TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT 1
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_requests (
                    user_id INTEGER,
                    request_type TEXT,
                    request_data TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_settings (
                    user_id INTEGER PRIMARY KEY,
                    language TEXT DEFAULT 'ru',
                    notification_time TEXT DEFAULT '09:00',
                    timezone TEXT DEFAULT 'UTC+3',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def handle_start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._register_user(user_id)
        
        welcome_text = """üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Saudi Football TV Bot!

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ñ—É—Ç–±–æ–ª–∞!

üî• –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15-30 –º–∏–Ω—É—Ç
‚Ä¢ ‚öΩ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–≤—å—é –∏ –æ–±–∑–æ—Ä—ã –º–∞—Ç—á–µ–π  
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ üåü –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∑–≤–µ–∑–¥–∞—Ö –ª–∏–≥–∏
‚Ä¢ üß† –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üí∞ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏

üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª—é–±–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º/–∏–≥—Ä–æ–∫–∞–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("‚öΩ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É", callback_data="subscribe_team")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def handle_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
        menu_text = """üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ Saudi Football TV Bot

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"""

        keyboard = [
            [
                InlineKeyboardButton("‚öΩ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu"),
                InlineKeyboardButton("üåü –ò–≥—Ä–æ–∫–∏", callback_data="players_menu")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu"),
                InlineKeyboardButton("üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data="table_menu")
            ],
            [
                InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="latest_news"),
                InlineKeyboardButton("‚öΩ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π", callback_data="fixtures")
            ],
            [
                InlineKeyboardButton("üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(menu_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(menu_text, reply_markup=reply_markup)

    async def handle_teams_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        teams_text = """‚öΩ –ö–û–ú–ê–ù–î–´ Saudi Pro League

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""

        teams = [
            ("–ê–ª—å-–•–∏–ª—è–ª—å", "team_alhilal"),
            ("–ê–ª—å-–ù–∞—Å—Å—Ä", "team_alnassr"), 
            ("–ê–ª—å-–ê—Ö–ª–∏", "team_alahli"),
            ("–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥", "team_alittihad"),
            ("–ê–ª—å-–®–∞–±–∞–±", "team_alshabab"),
            ("–ê–ª—å-–§–∞—Ç–µ—Ö", "team_alfateh")
        ]
        
        keyboard = []
        for i in range(0, len(teams), 2):
            row = []
            row.append(InlineKeyboardButton(teams[i][0], callback_data=teams[i][1]))
            if i + 1 < len(teams):
                row.append(InlineKeyboardButton(teams[i+1][0], callback_data=teams[i+1][1]))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(teams_text, reply_markup=reply_markup)

    async def handle_team_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
        callback_data = update.callback_query.data
        team_name = self._get_team_name_from_callback(callback_data)
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        team_info = self._get_team_detailed_info(team_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
        is_subscribed = self._check_user_subscription(user_id, team_name, 'team')
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"team_stats_{callback_data.split('_')[1]}"),
                InlineKeyboardButton("‚öΩ –ú–∞—Ç—á–∏", callback_data=f"team_matches_{callback_data.split('_')[1]}")
            ],
            [
                InlineKeyboardButton("üåü –°–æ—Å—Ç–∞–≤", callback_data=f"team_squad_{callback_data.split('_')[1]}"),
                InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data=f"team_news_{callback_data.split('_')[1]}")
            ]
        ]
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
        if is_subscribed:
            keyboard.append([InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã", callback_data=f"unsubscribe_team_{callback_data.split('_')[1]}")])
        else:
            keyboard.append([InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É", callback_data=f"subscribe_team_{callback_data.split('_')[1]}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(team_info, reply_markup=reply_markup)

    async def handle_players_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏–≥—Ä–æ–∫–æ–≤"""
        players_text = """üåü –ó–í–ï–ó–î–´ Saudi Pro League

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""

        players = [
            ("–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É", "player_ronaldo"),
            ("–ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞", "player_benzema"),
            ("–ù'–ì–æ–ª–æ –ö–∞–Ω—Ç–µ", "player_kante"),
            ("–†–∏—è–¥ –ú–∞—Ö—Ä–µ–∑", "player_mahrez"),
            ("–°–∞–¥–∏–æ –ú–∞–Ω–µ", "player_mane"),
            ("–†–æ–±–µ—Ä—Ç–æ –§–∏—Ä–º–∏–Ω–æ", "player_firmino")
        ]
        
        keyboard = []
        for i in range(0, len(players), 2):
            row = []
            row.append(InlineKeyboardButton(players[i][0], callback_data=players[i][1]))
            if i + 1 < len(players):
                row.append(InlineKeyboardButton(players[i+1][0], callback_data=players[i+1][1]))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(players_text, reply_markup=reply_markup)

    async def handle_player_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        callback_data = update.callback_query.data
        player_name = self._get_player_name_from_callback(callback_data)
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        player_info = self._get_player_detailed_info(player_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        is_subscribed = self._check_user_subscription(user_id, player_name, 'player')
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞", callback_data=f"player_stats_{callback_data.split('_')[1]}"),
                InlineKeyboardButton("‚öΩ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏", callback_data=f"player_matches_{callback_data.split('_')[1]}")
            ],
            [
                InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data=f"player_achievements_{callback_data.split('_')[1]}"),
                InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data=f"player_news_{callback_data.split('_')[1]}")
            ]
        ]
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
        if is_subscribed:
            keyboard.append([InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä–æ–∫–∞", callback_data=f"unsubscribe_player_{callback_data.split('_')[1]}")])
        else:
            keyboard.append([InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä–æ–∫–∞", callback_data=f"subscribe_player_{callback_data.split('_')[1]}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ö –∏–≥—Ä–æ–∫–∞–º", callback_data="players_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(player_info, reply_markup=reply_markup)

    async def handle_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫/–æ—Ç–ø–∏—Å–æ–∫"""
        callback_data = update.callback_query.data
        user_id = update.effective_user.id
        
        parts = callback_data.split('_')
        action = parts[0]  # subscribe/unsubscribe
        entity_type = parts[1]  # team/player
        entity_id = parts[2]
        
        entity_name = self._get_entity_name_from_id(entity_type, entity_id)
        
        if action == "subscribe":
            success = self._add_user_subscription(user_id, entity_name, entity_type)
            if success:
                message = f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {entity_name}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å {entity_name}."
            else:
                message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ {entity_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:  # unsubscribe
            success = self._remove_user_subscription(user_id, entity_name, entity_type)
            if success:
                message = f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {entity_name}."
            else:
                message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç {entity_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–Ω–æ—Å—Ç–∏
        if entity_type == "team":
            back_callback = f"team_{entity_id}"
        else:
            back_callback = f"player_{entity_id}"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)

    async def handle_my_subscriptions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        subscriptions = self._get_user_subscriptions(user_id)
        
        if not subscriptions:
            text = """üîî –ú–û–ò –ü–û–î–ü–ò–°–ö–ò

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö!"""
            
            keyboard = [
                [InlineKeyboardButton("‚öΩ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É", callback_data="teams_menu")],
                [InlineKeyboardButton("üåü –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä–æ–∫–∞", callback_data="players_menu")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = "üîî –ú–û–ò –ü–û–î–ü–ò–°–ö–ò\n\n"
            
            teams = [sub for sub in subscriptions if sub['type'] == 'team']
            players = [sub for sub in subscriptions if sub['type'] == 'player']
            
            if teams:
                text += "‚öΩ –ö–û–ú–ê–ù–î–´:\n"
                for team in teams:
                    text += f"‚Ä¢ {team['name']}\n"
                text += "\n"
            
            if players:
                text += "üåü –ò–ì–†–û–ö–ò:\n"
                for player in players:
                    text += f"‚Ä¢ {player['name']}\n"
                text += "\n"
            
            text += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}"
            
            keyboard = [
                [InlineKeyboardButton("‚öΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏", callback_data="manage_team_subs")],
                [InlineKeyboardButton("üåü –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="manage_player_subs")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    async def handle_statistics_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_text = """üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê Saudi Pro League

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"""

        keyboard = [
            [
                InlineKeyboardButton("üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data="current_table"),
                InlineKeyboardButton("‚öΩ –ë–æ–º–±–∞—Ä–¥–∏—Ä—ã", callback_data="top_scorers")
            ],
            [
                InlineKeyboardButton("üéØ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", callback_data="top_assists"),
                InlineKeyboardButton("ü•Ö –õ—É—á—à–∏–µ –≤—Ä–∞—Ç–∞—Ä–∏", callback_data="top_keepers")
            ],
            [
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥", callback_data="team_statistics"),
                InlineKeyboardButton("üî• –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥", callback_data="team_form")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π", callback_data="match_statistics"),
                InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="fixtures_calendar")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(stats_text, reply_markup=reply_markup)

    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        settings = self._get_user_settings(user_id)
        
        settings_text = f"""‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ üåç –Ø–∑—ã–∫: {settings.get('language', '–†—É—Å—Å–∫–∏–π')}
‚Ä¢ üïê –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {settings.get('notification_time', '09:00')}
‚Ä¢ üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.get('timezone', 'UTC+3')}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"""

        keyboard = [
            [
                InlineKeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language"),
                InlineKeyboardButton("üïê –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="change_time")
            ],
            [
                InlineKeyboardButton("üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="change_timezone"),
                InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")
            ],
            [
                InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(settings_text, reply_markup=reply_markup)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    
    def _register_user(self, user_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR IGNORE INTO user_settings (user_id)
                VALUES (?)
            ''', (user_id,))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    def _add_user_subscription(self, user_id: int, entity_name: str, entity_type: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute('''
                SELECT COUNT(*) FROM user_subscriptions 
                WHERE user_id = ? AND team_name = ? AND subscription_type = ? AND is_active = 1
            ''', (user_id, entity_name, entity_type))
            
            if cursor.fetchone()[0] > 0:
                conn.close()
                return False  # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            if entity_type == 'team':
                cursor.execute('''
                    INSERT INTO user_subscriptions (user_id, team_name, subscription_type)
                    VALUES (?, ?, ?)
                ''', (user_id, entity_name, entity_type))
            else:  # player
                cursor.execute('''
                    INSERT INTO user_subscriptions (user_id, player_name, subscription_type)
                    VALUES (?, ?, ?)
                ''', (user_id, entity_name, entity_type))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    def _remove_user_subscription(self, user_id: int, entity_name: str, entity_type: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if entity_type == 'team':
                cursor.execute('''
                    UPDATE user_subscriptions 
                    SET is_active = 0 
                    WHERE user_id = ? AND team_name = ? AND subscription_type = ?
                ''', (user_id, entity_name, entity_type))
            else:  # player
                cursor.execute('''
                    UPDATE user_subscriptions 
                    SET is_active = 0 
                    WHERE user_id = ? AND player_name = ? AND subscription_type = ?
                ''', (user_id, entity_name, entity_type))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    def _check_user_subscription(self, user_id: int, entity_name: str, entity_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if entity_type == 'team':
                cursor.execute('''
                    SELECT COUNT(*) FROM user_subscriptions 
                    WHERE user_id = ? AND team_name = ? AND subscription_type = ? AND is_active = 1
                ''', (user_id, entity_name, entity_type))
            else:  # player
                cursor.execute('''
                    SELECT COUNT(*) FROM user_subscriptions 
                    WHERE user_id = ? AND player_name = ? AND subscription_type = ? AND is_active = 1
                ''', (user_id, entity_name, entity_type))
            
            result = cursor.fetchone()[0] > 0
            conn.close()
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    def _get_user_subscriptions(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT team_name, player_name, subscription_type 
                FROM user_subscriptions 
                WHERE user_id = ? AND is_active = 1
            ''', (user_id,))
            
            rows = cursor.fetchall()
            conn.close()
            
            subscriptions = []
            for row in rows:
                team_name, player_name, sub_type = row
                name = team_name if sub_type == 'team' else player_name
                subscriptions.append({
                    'name': name,
                    'type': sub_type
                })
            
            return subscriptions
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def _get_user_settings(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT language, notification_time, timezone 
                FROM user_settings 
                WHERE user_id = ?
            ''', (user_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return {
                    'language': row[0] or 'ru',
                    'notification_time': row[1] or '09:00',
                    'timezone': row[2] or 'UTC+3'
                }
            else:
                return {
                    'language': 'ru',
                    'notification_time': '09:00',
                    'timezone': 'UTC+3'
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}

    def get_subscribed_users(self, entity_name: str, entity_type: str) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if entity_type == 'team':
                cursor.execute('''
                    SELECT DISTINCT user_id FROM user_subscriptions 
                    WHERE team_name = ? AND subscription_type = ? AND is_active = 1
                ''', (entity_name, entity_type))
            else:  # player
                cursor.execute('''
                    SELECT DISTINCT user_id FROM user_subscriptions 
                    WHERE player_name = ? AND subscription_type = ? AND is_active = 1
                ''', (entity_name, entity_type))
            
            rows = cursor.fetchall()
            conn.close()
            
            return [row[0] for row in rows]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {entity_name}: {e}")
            return []

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–Ω–æ—Å—Ç—è—Ö
    
    def _get_team_name_from_callback(self, callback_data: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ callback_data"""
        team_mapping = {
            'team_alhilal': '–ê–ª—å-–•–∏–ª—è–ª—å',
            'team_alnassr': '–ê–ª—å-–ù–∞—Å—Å—Ä',
            'team_alahli': '–ê–ª—å-–ê—Ö–ª–∏',
            'team_alittihad': '–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥',
            'team_alshabab': '–ê–ª—å-–®–∞–±–∞–±',
            'team_alfateh': '–ê–ª—å-–§–∞—Ç–µ—Ö'
        }
        return team_mapping.get(callback_data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

    def _get_player_name_from_callback(self, callback_data: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ callback_data"""
        player_mapping = {
            'player_ronaldo': '–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É',
            'player_benzema': '–ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞',
            'player_kante': '–ù\'–ì–æ–ª–æ –ö–∞–Ω—Ç–µ',
            'player_mahrez': '–†–∏—è–¥ –ú–∞—Ö—Ä–µ–∑',
            'player_mane': '–°–∞–¥–∏–æ –ú–∞–Ω–µ',
            'player_firmino': '–†–æ–±–µ—Ä—Ç–æ –§–∏—Ä–º–∏–Ω–æ'
        }
        return player_mapping.get(callback_data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫')

    def _get_entity_name_from_id(self, entity_type: str, entity_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID"""
        if entity_type == 'team':
            return self._get_team_name_from_callback(f"team_{entity_id}")
        else:
            return self._get_player_name_from_callback(f"player_{entity_id}")

    def _get_team_detailed_info(self, team_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
        team_data = {
            '–ê–ª—å-–•–∏–ª—è–ª—å': {
                'stadium': '–°—Ç–∞–¥–∏–æ–Ω –ö–æ—Ä–æ–ª—è –§–∞—Ö–¥–∞',
                'founded': 1957,
                'position': 1,
                'points': 65,
                'matches': 25,
                'wins': 20,
                'draws': 5,
                'losses': 0,
                'goals_for': 68,
                'goals_against': 15
            },
            '–ê–ª—å-–ù–∞—Å—Å—Ä': {
                'stadium': '–°—Ç–∞–¥–∏–æ–Ω –ú—Ä—Å—É–ª –ü–∞—Ä–∫',
                'founded': 1955,
                'position': 2,
                'points': 60,
                'matches': 25,
                'wins': 18,
                'draws': 6,
                'losses': 1,
                'goals_for': 62,
                'goals_against': 20
            }
        }
        
        data = team_data.get(team_name, {
            'stadium': '–°—Ç–∞–¥–∏–æ–Ω',
            'founded': 1950,
            'position': 5,
            'points': 45,
            'matches': 25,
            'wins': 12,
            'draws': 9,
            'losses': 4,
            'goals_for': 40,
            'goals_against': 30
        })
        
        return f"""‚öΩ {team_name}

üèüÔ∏è –î–æ–º–∞—à–Ω–∏–π —Å—Ç–∞–¥–∏–æ–Ω: {data['stadium']}
üìÖ –ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: {data['founded']}

üìä –¢–ï–ö–£–©–ò–ô –°–ï–ó–û–ù:
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {data['position']} –º–µ—Å—Ç–æ
‚Ä¢ –û—á–∫–∏: {data['points']}
‚Ä¢ –ú–∞—Ç—á–∏: {data['matches']}
‚Ä¢ –ü–æ–±–µ–¥—ã: {data['wins']}
‚Ä¢ –ù–∏—á—å–∏: {data['draws']}
‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {data['losses']}
‚Ä¢ –ì–æ–ª—ã –∑–∞–±–∏—Ç–æ: {data['goals_for']}
‚Ä¢ –ì–æ–ª—ã –ø—Ä–æ–ø—É—â–µ–Ω–æ: {data['goals_against']}

üî• –§–æ—Ä–º–∞: –ü-–ü-–ù-–ü-–ü (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π)

#SaudiProLeague #{team_name.replace('-', '').replace(' ', '')}"""

    def _get_player_detailed_info(self, player_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        player_data = {
            '–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É': {
                'team': '–ê–ª—å-–ù–∞—Å—Å—Ä',
                'position': '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
                'age': 39,
                'nationality': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
                'goals': 22,
                'assists': 6,
                'matches': 24,
                'rating': 8.7
            },
            '–ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞': {
                'team': '–ê–ª—å-–ò—Ç—Ç–∏—Ö–∞–¥',
                'position': '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
                'age': 36,
                'nationality': '–§—Ä–∞–Ω—Ü–∏—è',
                'goals': 18,
                'assists': 8,
                'matches': 22,
                'rating': 8.4
            }
        }
        
        data = player_data.get(player_name, {
            'team': '–ö–æ–º–∞–Ω–¥–∞',
            'position': '–ò–≥—Ä–æ–∫',
            'age': 28,
            'nationality': '–°—Ç—Ä–∞–Ω–∞',
            'goals': 10,
            'assists': 5,
            'matches': 20,
            'rating': 7.5
        })
        
        return f"""üåü {player_name}

‚öΩ –ö–æ–º–∞–Ω–¥–∞: {data['team']}
üéØ –ü–æ–∑–∏—Ü–∏—è: {data['position']}
üë§ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç
üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data['nationality']}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–ó–û–ù–ê:
‚Ä¢ –ú–∞—Ç—á–∏: {data['matches']}
‚Ä¢ –ì–æ–ª—ã: {data['goals']}
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∏: {data['assists']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {data['rating']}/10

üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

#SaudiProLeague #Player #{player_name.replace(' ', '')}"""

