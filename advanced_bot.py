import os
import asyncio
import logging
import json
import sqlite3
import time
from datetime import datetime, timedelta
import random
from typing import List, Dict, Optional
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database_manager import DatabaseManager
from content_generator import ContentGenerator
from error_handler import BotLogger, ErrorHandler, HealthChecker, error_handler_decorator

# –í–ê–®–ò –î–ê–ù–ù–´–ï (—É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã!)
BOT_TOKEN = os.getenv('BOT_TOKEN', '7541467929:AAGLOxsVGckECmb-RJX9xIxiaFXuzDcOHbNQ')
CHANNEL_ID = os.getenv('CHANNEL_ID', '-1002643651612')
PORT = int(os.getenv('PORT', '8080'))

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
THESPORTSDB_API_KEY = "123"  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á
THESPORTSDB_BASE_URL = "https://www.thesportsdb.com/api/v1/json"

class AdvancedFootballBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bot_logger = BotLogger(log_level=logging.INFO)
        self.error_handler = ErrorHandler(self.bot_logger)
        self.health_checker = HealthChecker(self.bot_logger)
        self.db_manager = DatabaseManager()
        self.content_generator = ContentGenerator(self.db_manager)
        
        self.app = None
        self.bot_logger.log_startup(BOT_TOKEN, CHANNEL_ID)
    
    @error_handler_decorator(None, "start_command")
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            keyboard = [
                [InlineKeyboardButton("üì∞ –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='news')],
                [InlineKeyboardButton("‚öΩ –ú–∞—Ç—á–∏ —Å–µ–≥–æ–¥–Ω—è", callback_data='matches')],
                [InlineKeyboardButton("üìä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data='table')],
                [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data='stats')],
                [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–õ–£–ß–®–ï–ù–ù–´–ô Saudi Football Bot!**

üÜï **–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ API
‚Ä¢ –£–º–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞

‚öΩ **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–ª–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π (9:00)
‚Ä¢ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 10:00)
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏

üì± **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:**
            """
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            self.bot_logger.log_info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", "üöÄ")
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "start_command")
            raise

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == 'news':
                await self.send_latest_news(query)
            elif query.data == 'matches':
                await self.send_today_matches(query)
            elif query.data == 'table':
                await self.send_league_table(query)
            elif query.data == 'stats':
                await self.send_bot_stats(query)
            elif query.data == 'about':
                await self.send_about_info(query)
            
            self.bot_logger.log_info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, f"button_callback_{query.data}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def send_latest_news(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            news_list = self.content_generator.generate_smart_full_news(use_real_data=True)
            
            text = "üì∞ **–ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–°–¢–ò –ê–†–ê–ë–°–ö–û–ì–û –§–£–¢–ë–û–õ–ê**\n\n"
            
            for i, article in enumerate(news_list[:3], 1):
                text += f"**{i}. {article['title']}**\n"
                text += f"{article['summary']}\n"
                text += f"üïê {article['time']}\n"
                text += f"üè∑Ô∏è {', '.join(article['tags'][:2])}\n\n"
            
            text += "üì¢ *–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!*\n"
            text += f"ü§ñ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É–º–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≤ {datetime.now().strftime('%H:%M')}*"
            
            await query.edit_message_text(text, parse_mode='Markdown')
            self.health_checker.update_message_status(True)
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_latest_news")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

    async def send_today_matches(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            matches = self.content_generator.generate_smart_matches()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self.content_generator.format_matches_message(matches)
            
            await query.edit_message_text(formatted_message, parse_mode='Markdown')
            self.health_checker.update_message_status(True)
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_today_matches")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    async def send_league_table(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            table = self.content_generator.generate_smart_league_table()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self.content_generator.format_league_table_message(table, detailed=False)
            
            await query.edit_message_text(formatted_message, parse_mode='Markdown')
            self.health_checker.update_message_status(True)
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_league_table")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")

    async def send_bot_stats(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger_stats = self.bot_logger.get_stats()
            error_stats = self.error_handler.get_error_summary()
            health_stats = self.health_checker.get_health_status()
            db_stats = self.db_manager.get_database_stats()
            content_stats = self.content_generator.get_content_stats()
            
            text = "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
            
            # –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            status_emoji = {"healthy": "üíö", "warning": "‚ö†Ô∏è", "starting": "üîÑ"}.get(health_stats['overall_status'], "‚ùì")
            text += f"{status_emoji} **–°—Ç–∞—Ç—É—Å:** {health_stats['overall_status']}\n"
            text += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {health_stats['uptime_formatted']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            text += f"üì± **–°–æ–æ–±—â–µ–Ω–∏—è:**\n"
            text += f"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {logger_stats['info_messages']}\n"
            text += f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {logger_stats['warnings']}\n"
            text += f"‚Ä¢ –û—à–∏–±–æ–∫: {logger_stats['errors']}\n\n"
            
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            text += f"üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
            text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥: {db_stats.get('teams_count', 0)}\n"
            text += f"‚Ä¢ –ú–∞—Ç—á–µ–π: {db_stats.get('matches_count', 0)}\n"
            text += f"‚Ä¢ –ù–æ–≤–æ—Å—Ç–µ–π: {db_stats.get('news_count', 0)}\n"
            text += f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_stats.get('published_news', 0)}\n\n"
            
            # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            text += f"üé® **–ö–æ–Ω—Ç–µ–Ω—Ç:**\n"
            text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: {content_stats['teams_count']}\n"
            text += f"‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: {content_stats['players_count']}\n"
            text += f"‚Ä¢ –®–∞–±–ª–æ–Ω–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π: {content_stats['full_templates']}\n\n"
            
            text += f"üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}*"
            
            await query.edit_message_text(text, parse_mode='Markdown')
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_bot_stats")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def send_about_info(self, query):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–∏–π"""
        try:
            text = """
‚ÑπÔ∏è **–£–õ–£–ß–®–ï–ù–ù–´–ô SAUDI FOOTBALL BOT v2.0**

üöÄ **–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**

üß† **–£–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TheSportsDB API
‚Ä¢ –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ë–æ–ª–µ–µ 50 —à–∞–±–ª–æ–Ω–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ SQLite –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ API
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

üõ°Ô∏è **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üì± **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–ª–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ –ú–∞—Ç—á–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00

üí° *–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é!*
            """
            
            await query.edit_message_text(text, parse_mode='Markdown')
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_about_info")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    async def send_smart_quick_news(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω—ã—Ö —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            start_time = time.time()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
            quick_news = self.content_generator.generate_smart_quick_news(use_real_data=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å
            is_new = self.db_manager.save_news_advanced(quick_news)
            
            if is_new:
                text = f"‚ö° **–°–†–û–ß–ù–´–ï –ù–û–í–û–°–¢–ò**\n\n"
                text += f"üì∞ {quick_news['title']}\n\n"
                text += f"{quick_news['content']}\n\n"
                text += f"üïê {datetime.now().strftime('%H:%M')} | üî• –ì–æ—Ä—è—á–∞—è –Ω–æ–≤–æ—Å—Ç—å!"
                
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=text,
                    parse_mode='Markdown'
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.health_checker.update_message_status(True)
                self.db_manager.save_bot_stat("quick_news_sent", "1")
                
                duration = time.time() - start_time
                self.bot_logger.log_job_execution("send_smart_quick_news", True, duration)
            else:
                self.bot_logger.log_warning("–°—Ä–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞", "send_smart_quick_news")
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_smart_quick_news")

    async def send_smart_news_to_channel(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª"""
        try:
            start_time = time.time()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_list = self.content_generator.generate_smart_full_news(use_real_data=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            new_news = []
            for news_item in news_list:
                if self.db_manager.save_news_advanced(news_item):
                    new_news.append(news_item)
            
            if new_news:
                text = "üì∞ **–ù–û–í–û–°–¢–ò –ê–†–ê–ë–°–ö–û–ì–û –§–£–¢–ë–û–õ–ê**\n\n"
                
                for i, article in enumerate(new_news[:3], 1):
                    text += f"**{i}. {article['title']}**\n"
                    text += f"{article['summary']}\n"
                    text += f"üïê {article['time']}\n"
                    text += f"üè∑Ô∏è {', '.join(article['tags'][:2])}\n\n"
                
                text += f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                text += "üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!"
                
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=text,
                    parse_mode='Markdown'
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.health_checker.update_message_status(True)
                self.db_manager.save_bot_stat("full_news_sent", str(len(new_news)))
                
                duration = time.time() - start_time
                self.bot_logger.log_job_execution("send_smart_news_to_channel", True, duration)
            else:
                self.bot_logger.log_info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_smart_news_to_channel")

    async def send_smart_matches_to_channel(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π –≤ –∫–∞–Ω–∞–ª"""
        try:
            start_time = time.time()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            matches = self.content_generator.generate_smart_matches()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self.content_generator.format_matches_message(matches)
            
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=formatted_message,
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.health_checker.update_message_status(True)
            self.db_manager.save_bot_stat("matches_sent", str(len(matches)))
            
            duration = time.time() - start_time
            self.bot_logger.log_job_execution("send_smart_matches_to_channel", True, duration)
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_smart_matches_to_channel")

    async def send_smart_table_to_channel(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–∞–Ω–∞–ª"""
        try:
            start_time = time.time()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                await self.fetch_real_league_data()
                self.health_checker.update_api_status(True)
            except Exception as api_error:
                self.error_handler.handle_api_error(api_error, "league_table", {})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            table = self.content_generator.generate_smart_league_table()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self.content_generator.format_league_table_message(table, detailed=True)
            
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=formatted_message,
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.health_checker.update_message_status(True)
            self.db_manager.save_bot_stat("table_sent", "1")
            
            duration = time.time() - start_time
            self.bot_logger.log_job_execution("send_smart_table_to_channel", True, duration)
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_smart_table_to_channel")

    async def fetch_real_league_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ª–∏–≥–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞—É–¥–æ–≤—Å–∫–æ–π –ª–∏–≥–∏
                url = f"{THESPORTSDB_BASE_URL}/{THESPORTSDB_API_KEY}/lookuptable.php?l=4480"
                
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('table'):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                            for team in data['table']:
                                team_data = {
                                    'api_id': team.get('idTeam'),
                                    'name': team.get('strTeam'),
                                    'league': 'Saudi Pro League',
                                    'country': 'Saudi Arabia'
                                }
                                self.db_manager.save_team(team_data)
                            
                            self.bot_logger.log_api_request("lookuptable", {"league": "4480"}, True)
                            self.health_checker.update_api_status(True)
                        else:
                            self.bot_logger.log_warning("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
                    else:
                        self.bot_logger.log_warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
        except Exception as e:
            self.error_handler.handle_api_error(e, "lookuptable", {"league": "4480"})
            raise

    async def send_startup_message(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            text = """
üöÄ **–£–õ–£–ß–®–ï–ù–ù–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù!**

‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú–ò —É–ª—É—á—à–µ–Ω–∏—è–º–∏!

üÜï **–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TheSportsDB API
‚Ä¢ –£–º–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üìÖ **–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ß–ê–°–¢–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï:**
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–ª–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ –ú–∞—Ç—á–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00

ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
üìä –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üî• **–ë–û–¢ –ì–û–¢–û–í –ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò!**
            """
            
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=text,
                parse_mode='Markdown'
            )
            
            self.bot_logger.log_info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞", "üöÄ")
            
        except Exception as e:
            self.error_handler.handle_telegram_error(e, "send_startup_message")

    async def periodic_health_check(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
            self.db_manager.clean_old_cache()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ
            self.health_checker.log_health_report()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            health_stats = self.health_checker.get_health_status()
            self.db_manager.save_bot_stat("health_check", health_stats['overall_status'])
            
        except Exception as e:
            self.error_handler.handle_database_error(e, "periodic_health_check")

    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        job_queue = self.app.job_queue
        
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ß–ê–°–¢–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –° –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò!
        
        # 1. –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            self.send_smart_quick_news,
            interval=900,  # 15 –º–∏–Ω—É—Ç
            first=300  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        )
        
        # 2. –ü–æ–ª–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            self.send_smart_news_to_channel,
            interval=1800,  # 30 –º–∏–Ω—É—Ç
            first=60  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        )
        
        # 3. –ú–∞—Ç—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        job_queue.run_daily(
            self.send_smart_matches_to_channel,
            time=datetime.strptime("09:00", "%H:%M").time()
        )
        
        # 4. –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
        job_queue.run_daily(
            self.send_smart_table_to_channel,
            time=datetime.strptime("10:00", "%H:%M").time(),
            days=(0,)  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        )
        
        # 5. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        job_queue.run_once(
            self.send_startup_message,
            when=10  # –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        )
        
        # 6. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        job_queue.run_repeating(
            self.periodic_health_check,
            interval=7200,  # 2 —á–∞—Å–∞
            first=3600  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å
        )
        
        self.bot_logger.log_info("üî• –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ß–ê–°–¢–û–ï —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ü–û–õ–ù–´–ú–ò –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò!")

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = Application.builder().token(BOT_TOKEN).build()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ error_handler
            self.error_handler.bot_app = self.app
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏–π
            self.setup_jobs()
            
            self.bot_logger.log_info("üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏...")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.app.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            self.error_handler.add_critical_error(e, "run_bot")
            self.bot_logger.log_error(e, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AdvancedFootballBot()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–£–ß–®–ï–ù–ù–û–ì–û Saudi Football Bot v2.0...")
    print(f"üì± –ö–∞–Ω–∞–ª: {CHANNEL_ID}")
    print("üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´:")
    print("   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API")
    print("   ‚Ä¢ –£–º–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
    print("   ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è")
    print("   ‚Ä¢ –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.run_bot()

if __name__ == "__main__":
    main()

