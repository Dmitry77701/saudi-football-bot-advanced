import logging
import traceback
import sys
from datetime import datetime
from typing import Optional, Dict, Any
from functools import wraps
import asyncio
import json

class BotLogger:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, log_level=logging.INFO, log_file="bot.log"):
        self.log_file = log_file
        self.setup_logging(log_level)
        self.error_count = 0
        self.warning_count = 0
        self.info_count = 0
        
    def setup_logging(self, log_level):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(log_level)
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        try:
            file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
            file_handler.setLevel(logging.DEBUG)  # –í —Ñ–∞–π–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ
            file_handler.setFormatter(formatter)
            root_logger.addHandler(file_handler)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞
        self.logger = logging.getLogger('FootballBot')
        
        # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger('httpx').setLevel(logging.WARNING)
        logging.getLogger('telegram').setLevel(logging.WARNING)
        logging.getLogger('aiohttp').setLevel(logging.WARNING)
        
        self.logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def log_startup(self, bot_token: str, channel_id: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("=" * 50)
        self.logger.info("ü§ñ –ó–ê–ü–£–°–ö –§–£–¢–ë–û–õ–¨–ù–û–ì–û –ë–û–¢–ê")
        self.logger.info("=" * 50)
        self.logger.info(f"üì± –ö–∞–Ω–∞–ª: {channel_id}")
        self.logger.info(f"üîë –¢–æ–∫–µ–Ω: {bot_token[:10]}...")
        self.logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info("=" * 50)
    
    def log_api_request(self, endpoint: str, params: Dict = None, success: bool = True, response_time: float = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        time_info = f" ({response_time:.2f}s)" if response_time else ""
        
        self.logger.info(f"üåê API {status}: {endpoint}{time_info}")
        if params:
            self.logger.debug(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    
    def log_message_sent(self, message_type: str, channel_id: str, success: bool = True):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        status = "‚úÖ" if success else "‚ùå"
        self.logger.info(f"{status} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message_type} -> {channel_id}")
    
    def log_database_operation(self, operation: str, table: str, success: bool = True, affected_rows: int = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        status = "‚úÖ" if success else "‚ùå"
        rows_info = f" ({affected_rows} —Å—Ç—Ä–æ–∫)" if affected_rows is not None else ""
        self.logger.info(f"{status} –ë–î {operation}: {table}{rows_info}")
    
    def log_job_execution(self, job_name: str, success: bool = True, duration: float = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
        status = "‚úÖ" if success else "‚ùå"
        time_info = f" –∑–∞ {duration:.2f}—Å" if duration else ""
        self.logger.info(f"{status} –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {job_name}{time_info}")
    
    def log_error(self, error: Exception, context: str = None, extra_data: Dict = None):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        self.error_count += 1
        
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê #{self.error_count}"
        if context:
            error_msg += f" –≤ {context}"
        
        self.logger.error(error_msg)
        self.logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(error).__name__}")
        self.logger.error(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}")
        
        if extra_data:
            self.logger.error(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {extra_data}")
        
        # –ü–æ–ª–Ω—ã–π traceback –≤ debug —Ä–µ–∂–∏–º–µ
        self.logger.debug(f"üìö –ü–æ–ª–Ω—ã–π traceback:\n{traceback.format_exc()}")
    
    def log_warning(self, message: str, context: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        self.warning_count += 1
        warning_msg = f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï #{self.warning_count}"
        if context:
            warning_msg += f" –≤ {context}"
        warning_msg += f": {message}"
        
        self.logger.warning(warning_msg)
    
    def log_info(self, message: str, emoji: str = "‚ÑπÔ∏è"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.info_count += 1
        self.logger.info(f"{emoji} {message}")
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'errors': self.error_count,
            'warnings': self.warning_count,
            'info_messages': self.info_count,
            'log_file': self.log_file
        }

class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    
    def __init__(self, logger: BotLogger, bot_app=None):
        self.logger = logger
        self.bot_app = bot_app
        self.critical_errors = []
        self.retry_attempts = {}
        
    def handle_telegram_error(self, error: Exception, context: str = "Telegram API"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API"""
        error_type = type(error).__name__
        
        if "rate limit" in str(error).lower():
            self.logger.log_warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API", context)
            return "rate_limit"
        elif "forbidden" in str(error).lower():
            self.logger.log_error(error, context, {"suggestion": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"})
            return "forbidden"
        elif "not found" in str(error).lower():
            self.logger.log_error(error, context, {"suggestion": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞"})
            return "not_found"
        else:
            self.logger.log_error(error, context)
            return "unknown"
    
    def handle_api_error(self, error: Exception, endpoint: str, params: Dict = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö API"""
        error_info = {
            "endpoint": endpoint,
            "params": params,
            "error_type": type(error).__name__
        }
        
        if "timeout" in str(error).lower():
            self.logger.log_warning(f"–¢–∞–π–º–∞—É—Ç API –∑–∞–ø—Ä–æ—Å–∞: {endpoint}")
            return "timeout"
        elif "connection" in str(error).lower():
            self.logger.log_warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API: {endpoint}")
            return "connection"
        else:
            self.logger.log_error(error, f"API –∑–∞–ø—Ä–æ—Å: {endpoint}", error_info)
            return "api_error"
    
    def handle_database_error(self, error: Exception, operation: str, table: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        error_info = {
            "operation": operation,
            "table": table,
            "error_type": type(error).__name__
        }
        
        if "locked" in str(error).lower():
            self.logger.log_warning(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {operation}")
            return "locked"
        elif "no such table" in str(error).lower():
            self.logger.log_error(error, f"–ë–î –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}", 
                                {"suggestion": "–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î"})
            return "table_missing"
        else:
            self.logger.log_error(error, f"–ë–î –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}", error_info)
            return "db_error"
    
    def should_retry(self, error_type: str, operation_key: str, max_retries: int = 3) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"""
        if operation_key not in self.retry_attempts:
            self.retry_attempts[operation_key] = 0
        
        if self.retry_attempts[operation_key] >= max_retries:
            self.logger.log_warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {operation_key}")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        retryable_errors = ["timeout", "connection", "rate_limit", "locked"]
        
        if error_type in retryable_errors:
            self.retry_attempts[operation_key] += 1
            self.logger.log_info(f"–ü–æ–≤—Ç–æ—Ä #{self.retry_attempts[operation_key]} –¥–ª—è {operation_key}")
            return True
        
        return False
    
    def reset_retry_counter(self, operation_key: str):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if operation_key in self.retry_attempts:
            del self.retry_attempts[operation_key]
    
    def add_critical_error(self, error: Exception, context: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
        critical_error = {
            'timestamp': datetime.now().isoformat(),
            'error': str(error),
            'type': type(error).__name__,
            'context': context,
            'traceback': traceback.format_exc()
        }
        
        self.critical_errors.append(critical_error)
        self.logger.log_error(error, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {context}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if len(self.critical_errors) > 10:
            self.critical_errors = self.critical_errors[-10:]
    
    def get_error_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—à–∏–±–∫–∞–º"""
        return {
            'critical_errors_count': len(self.critical_errors),
            'recent_critical_errors': self.critical_errors[-3:] if self.critical_errors else [],
            'active_retries': len(self.retry_attempts),
            'retry_operations': list(self.retry_attempts.keys())
        }

def error_handler_decorator(error_handler: ErrorHandler, operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            try:
                result = await func(*args, **kwargs)
                error_handler.reset_retry_counter(operation_name)
                return result
            except Exception as e:
                error_type = error_handler.handle_telegram_error(e, operation_name)
                
                if error_handler.should_retry(error_type, operation_name):
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    await asyncio.sleep(2 ** error_handler.retry_attempts.get(operation_name, 1))
                    return await async_wrapper(*args, **kwargs)
                else:
                    error_handler.add_critical_error(e, operation_name)
                    raise
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            try:
                result = func(*args, **kwargs)
                error_handler.reset_retry_counter(operation_name)
                return result
            except Exception as e:
                error_type = error_handler.handle_database_error(e, operation_name)
                
                if error_handler.should_retry(error_type, operation_name):
                    return sync_wrapper(*args, **kwargs)
                else:
                    error_handler.add_critical_error(e, operation_name)
                    raise
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    return decorator

class HealthChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    
    def __init__(self, logger: BotLogger):
        self.logger = logger
        self.last_successful_message = None
        self.last_api_call = None
        self.last_db_operation = None
        self.start_time = datetime.now()
    
    def update_message_status(self, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if success:
            self.last_successful_message = datetime.now()
    
    def update_api_status(self, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API –≤—ã–∑–æ–≤–æ–≤"""
        if success:
            self.last_api_call = datetime.now()
    
    def update_db_status(self, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ë–î –æ–ø–µ—Ä–∞—Ü–∏–π"""
        if success:
            self.last_db_operation = datetime.now()
    
    def get_health_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        now = datetime.now()
        uptime = now - self.start_time
        
        status = {
            'uptime_seconds': int(uptime.total_seconds()),
            'uptime_formatted': str(uptime).split('.')[0],
            'start_time': self.start_time.isoformat(),
            'current_time': now.isoformat()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self.last_successful_message:
            message_age = (now - self.last_successful_message).total_seconds()
            status['last_message_seconds_ago'] = int(message_age)
            status['message_status'] = 'healthy' if message_age < 3600 else 'warning'
        else:
            status['message_status'] = 'unknown'
        
        if self.last_api_call:
            api_age = (now - self.last_api_call).total_seconds()
            status['last_api_seconds_ago'] = int(api_age)
            status['api_status'] = 'healthy' if api_age < 7200 else 'warning'
        else:
            status['api_status'] = 'unknown'
        
        if self.last_db_operation:
            db_age = (now - self.last_db_operation).total_seconds()
            status['last_db_seconds_ago'] = int(db_age)
            status['db_status'] = 'healthy' if db_age < 3600 else 'warning'
        else:
            status['db_status'] = 'unknown'
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        statuses = [status.get('message_status'), status.get('api_status'), status.get('db_status')]
        if 'unknown' in statuses:
            status['overall_status'] = 'starting'
        elif 'warning' in statuses:
            status['overall_status'] = 'warning'
        else:
            status['overall_status'] = 'healthy'
        
        return status
    
    def log_health_report(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ"""
        health = self.get_health_status()
        
        self.logger.log_info(f"üíö –û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞:")
        self.logger.log_info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {health['uptime_formatted']}")
        self.logger.log_info(f"üì± –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π: {health['message_status']}")
        self.logger.log_info(f"üåê –°—Ç–∞—Ç—É—Å API: {health['api_status']}")
        self.logger.log_info(f"üíæ –°—Ç–∞—Ç—É—Å –ë–î: {health['db_status']}")
        self.logger.log_info(f"üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['overall_status']}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    bot_logger = BotLogger(log_level=logging.DEBUG)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    error_handler = ErrorHandler(bot_logger)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è
    health_checker = HealthChecker(bot_logger)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
    bot_logger.log_startup("test_token", "@test_channel")
    bot_logger.log_api_request("/test/endpoint", {"param": "value"}, True, 0.5)
    bot_logger.log_message_sent("news", "@test_channel", True)
    bot_logger.log_database_operation("INSERT", "news", True, 1)
    bot_logger.log_job_execution("send_news", True, 2.3)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    try:
        raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    except Exception as e:
        error_handler.handle_telegram_error(e, "test_context")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è
    health_checker.update_message_status(True)
    health_checker.update_api_status(True)
    health_checker.update_db_status(True)
    health_checker.log_health_report()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger_stats = bot_logger.get_stats()
    error_stats = error_handler.get_error_summary()
    health_stats = health_checker.get_health_status()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–≥–µ—Ä–∞: {logger_stats}")
    print(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫: {error_stats}")
    print(f"üíö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {health_stats}")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

